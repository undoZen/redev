#!/usr/bin/env node

var express = require('express');
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var path = require('path');

var port = process.env.PORT || 4000;
var target = process.env.TARGET;
var targetPrefix = process.env.TARGET_PREFIX;
var contentBase = target ? {target: target} : void 0;
var cwd = process.env.REDEV_ROOT || process.cwd();
var config;
try {
  config = require(path.join(cwd, 'webpack.config'));
} catch (e) {
  config = require(path.resolve(__dirname, '../webpack.config'))(cwd, port);
}

var compiler = webpack(config);
/*
compiler.plugin('done', function (stat) {
  console.log(stat.compilation.fileDependencies.filter(function (f) {
    return f.match(/\.css$/i);
  }));
});
*/
var devServer = new WebpackDevServer(compiler, {
  contentBase: contentBase,
  publicPath: config.output.publicPath,
  hot: true
});

var app = express();
app.use(
  path.join(config.output.publicPath, '_', 'node_modules'),
  express['static'](path.join(cwd, 'node_modules')));
app.use(
  '/dist',
  express['static'](path.resolve(cwd, 'src')));

if (target) {
  if (targetPrefix) {
    app.use(devServer.middleware);
    app.use(function (req, res, next) {
      if (req.url.indexOf(targetPrefix) === 0 || req.url.match(/__webpack_dev_server__|webpack-dev-server/)) {
        devServer.app(req, res, next);
      } else {
        next();
      }
    });
    app.use(express['static'](cwd), serveIndex);
  } else {
    app.use(devServer.app);
  }
} else {
  app.use(devServer.app);
  app.use(serveIndex);
}

function serveIndex(req, res, next) {
  res.set('Content-Type', 'text/html; charset=utf-8');
  res.sendFile(path.join(cwd, 'index.html'));
}

var listeningApp = app.listen(port, function (err, result) {
  if (err) {
    console.log(err);
  }
  console.log('Listening at port ' + port);
});

if (target && targetPrefix) {
  var socketio = require('webpack-dev-server/node_modules/socket.io');
  devServer.io = socketio.listen(listeningApp, {
    "log level": 1
  });
  devServer.io.sockets.on("connection", function(socket) {
    if(devServer.hot) socket.emit("hot");
    if(!devServer._stats) return;
    devServer._sendStats(socket, devServer._stats.toJson());
  }.bind(this));
}
